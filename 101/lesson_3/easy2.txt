# easy2.txt

# QUESTION 1

In this hash of people and their age,

ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 402, "Eddie" => 10 }

see if "Spot" is present.
Bonus: What are two other hash methods that would work just as well for this solution
p ages.has_key?('Spot')
p ages.include?('Spot')
p ages.fetch('Spot', "not found")
p ages.member?('Spot')

NB .include? and .member? do exactly the same

#########################################################################################
# QUESTION 2

Starting with this string:
munsters_description = "The Munsters are creepy in a good way."

Convert the string in the following ways (code will be executed on original munsters_description above):

"The munsters are creepy in a good way."
"tHE mUNSTERS ARE CREEPY IN A GOOD WAY."
"the munsters are creepy in a good way."
"THE MUNSTERS ARE CREEPY IN A GOOD WAY."

p munsters_description.capitalize
p munsters_description.swapcase
p munsters_description.downcase
p munsters_description.upcase


#########################################################################################

# QUESTION 3

We have most of the Munster family in our age hash:
ages = { "Herman" => 32, "Lily" => 30, "Grandpa" => 5843, "Eddie" => 10 }

add ages for Marilyn and Spot to the existing hash
additional_ages = { "Marilyn" => 22, "Spot" => 237 }

ages.merge!(additional_ages)

#########################################################################################

# QUESTION 4

See if the name "Dino" appears in the string below:

advice = "Few things in life are as important as house training your pet dinosaur."
advice.match('Dino')
advice.include?('Dino')

difference between .match and .include?
- String#included? returns boolean true/false, and expects a string as input.
- String#match returns information about the match in the form of MatchData (or nil if nothing was matched), and accepts a string or regular expression.

#########################################################################################

# QUESTION 5

Show an easier way to write this array:

flinstones = ["Fred", "Barney", "Wilma", "Betty", "BamBam", "Pebbles"]
flinstones = %w(Fred Barney Wilma Betty BamBam Pebbles)

#########################################################################################

# QUESTION 6

How can we add the family pet "Dino" to our usual array:
flinstones = %w(Fred Barney Wilma Betty BamBam Pebbles)

flinstones << 'Dino'
flinstones.push('Dino')
flinstones.concat(['Dino'])

#########################################################################################

# QUESTION 7

In the previous practice problem we added Dino to our array like this:

flinstones = %w(Fred Barney Wilma Betty BamBam Pebbles)
flinstones << "Dino"

we could have used either Array#concat or Array#push to add Dino to the family.
How can we add multiple items to our array? (Dino and Hoppy)


flinstones.push("Dino").push("Hoppy")   # push returns the array so we can chain
flinstones.push('Dino','Hoppy')         # but this works too!
flinstones << "Dino" << "Hoppy"

flinstones.concat(['Dino','Hoppy'])  or flintstones.concat(%w(Dino Hoppy))
works fine in ruby 2.4.1 but apparenty in some versions:  # concat adds an array rather than one item ?


#########################################################################################

# QUESTION 8

Shorten this sentence:

advice = "Few things in life are as important as house training your pet dinosaur."

...remove everything starting from "house".
Review the String#slice! documentation, and use that method to make the return value
"Few things in life are as important as ". But leave the advice variable as "house training your pet dinosaur.".


p advice.slice!(0, advice.index('house'))
p advice
# =>  "Few things in life are as important as "
# =>  "house training your pet dinosaur."

As a bonus, what happens if you use the String#slice method instead?
=> advice remains intact:
# =>"Few things in life are as important as "
# =>"Few things in life are as important as house training your pet dinosaur."

.slice works with index values for start and end (inclusive) of ranges
#########################################################################################

# QUESTION 9

Write a one-liner to count the number of lower-case 't' characters in the following string:

statement = "The Flintstones Rock!"
statement.count('t')

#########################################################################################

# QUESTION 10

Back in the stone age (before CSS) we used spaces to align things on the screen.
If we had a 40 character wide table of Flintstone family members, how could we easily center that title above the table with spaces?

title = "Flintstone Family Members"

title.center(40)
