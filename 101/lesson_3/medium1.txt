# medium1.txt

# QUESTION 1

Let's do some "ASCII Art" (a stone-age form of nerd artwork from back in the days before computers had video screens).

For this practice problem, write a one-line program that creates the following output 10 times,
with the subsequent line indented 1 space to the right:

The Flintstones Rock!
 The Flintstones Rock!
  The Flintstones Rock!

10.times { |i| puts " " * i + 'The Flintstones Rock!'}

#########################################################################################

# QUESTION 2

The result of the following statement will be an error:

puts "the value of 40 + 2 is " + (40 + 2)

Why is this and what are two possible ways to fix this?
The error arises because we're trying to add a string to an integer.
(40 + 2).to_s
puts "the value of 40 + 2 is #{40 + 2}"

#########################################################################################

# QUESTION 3

Alan wrote the following method, which was intended to show all of the factors of the input number:

def factors(number)
  dividend = number
  divisors = []
  begin
    divisors << number / dividend if number % dividend == 0
    dividend -= 1
  end until dividend == 0
  divisors
end

Alyssa noticed that this will fail if the input is 0, or a negative number,
and asked Alan to change the loop. How can you make this work without using begin/end/until?
Note that we're not looking to find the factors for 0 or negative numbers, but we just want to handle it gracefully
instead of raising an exception or going into an infinite loop.

def factors(number)
  dividend = number
  divisors = []
  while number > 0
    divisors << number if (number % divisors).zero?
    dividend -= 1
  end
  divisors
end

With this solutinons, our method won't even attempt to divide by zero if we forbid the loop and conditions from running if the input
is outside our boundaries.

What is the purpose of the number % dividend == 0 ?
  if there's no remainder, that identifies the number as a factor
What is the purpose of the second-to-last line in the method (the divisors before the methods end)?
  This is the value we want our method to return. Without an explicit 'return', the method returns the last line.


#########################################################################################

# QUESTION 4

Alyssa was asked to write an implementation of a rolling buffer.
Elements are added to the rolling buffer and if the buffer becomes full,
then new elements that are added will displace the oldest elements in the buffer.

def rolling_buffer1(buffer, max_buffer_size, new_element)
  buffer << new_element
  buffer.shift if buffer.size > max_buffer_size
  buffer
end

def rolling_buffer2(input_array, max_buffer_size, new_element)
  buffer = input_array + [new_element]
  buffer.shift if buffer.size > max_buffer_size
  buffer
end

She wrote two implementations saying, "Take your pick. Do you like << or + for modifying the buffer?".
Is there a difference between the two, other than what operator she chose to use to add an element to the buffer?

Yes, there is a difference. The method with << will mutate the original array object while the method with the + will only make changes to
a COPY of the original object, thereby not mutating.

#########################################################################################

# QUESTION 5

Alyssa asked Ben to write up a basic implementation of a Fibonacci calculator, A user passes in two numbers, and the calculator will keep computing the sequence until some limit is reached.
Ben coded up this implementation but complained that as soon as he ran it, he got an error. Something about the limit variable. Whats wrong with the code?

limit = 15  # <<-------------------- This variable is not visible within the method def unless it is passed in as a parameter

def fib(first_num, second_num)   # <<---------- add third parameter 'limit'
  while second_num < limit
    sum = first_num + second_num
    first_num = second_num
    second_num = sum
  end
  sum
end

result = fib(0, 1)               # <<---------- add third parameter 'limit'
puts "result is #{result}"

#########################################################################################

# QUESTION 6

def tricky_method(a_string_param, an_array_param)
  a_string_param += "rutabaga"
  an_array_param << "rutabaga"
end

my_string = "pumpkins"
my_array = ["pumpkins"]
tricky_method(my_string, my_array)

puts "My string looks like this now: #{my_string}"
puts "My array looks like this now: #{my_array}"

How can we refactor this practice problem to make the result easier to predict and easier for the next programmer to maintain?

def not_so_tricky_method(string_param, array_param)
  string_param += "potato"
  array_param  += ["potato"]

  return string_param, array_param                            # <==
end

a_string = "carrot"
an_array = ["carrot"]
a_string, an_array = not_so_tricky_method(a_string, an_array)  # <==

p a_string
p an_array

#########################################################################################

# QUESTION 7

What is the output of the following code?

answer = 42

def mess_with_it(some_number)
  some_number += 8
end

new_answer = mess_with_it(answer)
p answer - 8

# => 34

#########################################################################################

# QUESTION 8

One day Spot was playing with the Munster family's home computer and he wrote a small program to mess with their demographic data:

munsters = {
  "Herman" => { "age" => 32, "gender" => "male" },
  "Lily" => { "age" => 30, "gender" => "female" },
  "Grandpa" => { "age" => 402, "gender" => "male" },
  "Eddie" => { "age" => 10, "gender" => "male" },
  "Marilyn" => { "age" => 23, "gender" => "female"}
}

def mess_with_demographics(demo_hash)
  demo_hash.values.each do |family_member|
    family_member["age"] += 42
    family_member["gender"] = "other"
  end
end

After writing this method, he typed the following...and before Grandpa could stop him, he hit the Enter key with his tail:

mess_with_demographics(munsters)


Did the familys data get ransacked? Why or why not?
A: Yes. the hash method #[] re-assigns the value for the given key. The hash itself is mutated, and the object within it are reassigned.
IOW, the hash retains its object_id, and the re-assigned objects in the hash are new spaces in memory, and therefore have new object_ids

to prevent all this you need to make a deep copy of the hash. A shallow copy will
give you a new object.id, but the items in the hash will still have their old object ids.
to make deep copy:

  copy =  Marshal.load( Marshal.dump(munsters) )
  p mess_with_demographics(copy)

info at:
https://www.thoughtco.com/making-deep-copies-in-ruby-2907749
https://ruby-doc.org/core-2.4.1/Marshal.html

#########################################################################################

# QUESTION 9

Method calls can take expressions as arguments. Suppose we define a function called rps as follows, which follows the classic rules of rock-paper-scissors game, but with a slight twist that it declares whatever hand was used in the tie as the result of that tie.

def rps(fist1, fist2)
  if fist1 == "rock"
    (fist2 == "paper") ? "paper" : "rock"
  elsif fist1 == "paper"
    (fist2 == "scissors") ? "scissors" : "paper"
  else
    (fist2 == "rock") ? "rock" : "scissors"
  end
end
What is the result of the following call?

puts rps(rps(rps("rock", "paper"), rps("rock", "scissors")), "rock")

=> "paper"

#########################################################################################

# QUESTION 10

Consider these two simple methods:

def foo(param = "no")
  "yes"
end

def bar(param = "no")
  param == "no" ? "yes" : "no"
end
What would be the return value of the following method invocation?

bar(foo)

=> "no"
