# hard1.txt

#########################################################################################
# QUESTION 1

What do you expect to happen when the greeting variable is referenced in the last line of the code below?

if false
  greeting = “hello world”
end

p greeting

A: nothing 
If a variable is initialized within in 'if' block, even if the block of code isn't run, the vartiable inside is initialized to 'nil'. If it hadn't been initialized a "undefined method or local variable" exception is thrown.

#########################################################################################

# QUESTION 2

What is the result of the last line in the code below?

greetings = { a: 'hi' }
informal_greeting = greetings[:a]
informal_greeting << ' there'

puts informal_greeting  #  => "hi there"
puts greetings  

A: { a:=>'hi there'}

The reason is because informal_greeting is a reference to the original object.

two options to not mutate original:
- informal_greeting = greetings[:a].clone
- informal_greeting = informal_greeting + ' there' 

NB: the clone thing does seem to work on arrays, but not on hashes. Docs say it is
a shallow copy. Seems to have something to do with classes and what is and isn't 
copied...

#########################################################################################

# QUESTION 3

What will be printed by each of these code groups?

A) 

def mess_with_vars(one, two, three)
  one = two # reassignmen . original objects are not changed
  two = three
  three = one
end

one = "one"
two = "two"
three = "three"

mess_with_vars(one, two, three)

puts "one is: #{one}" # => "one is: one"
puts "two is: #{two}" # => "two is: two"
puts "three is: #{three}" # => "three is: three"
puts

B) 
def mess_with_vars(one, two, three)
  one = "two" # Again, with reassignment, our original objects will not change
  two = "three"
  three = "one"
end

one = "one" # original objects. won't change.
two = "two"
three = "three"

mess_with_vars(one, two, three)

puts "one is: #{one}" # => "one is: one"
puts "two is: #{two}" # => "two is: two"
puts "three is: #{three}" # => "three is: three"
puts

C) 

def mess_with_vars(one, two, three)
  one.gsub!("one","two") # gsub! modifies the object that called it. Here, 'one' references the same object as the outside variable by the same name.
  two.gsub!("two","three")
  three.gsub!("three","one")
end

one = "one"
two = "two"
three = "three"

mess_with_vars(one, two, three)

puts "one is: #{one}" # => "one is: two"
puts "two is: #{two}" # => "two is: three"
puts "three is: #{three}" # => "three is: one"

A: no mutating in the first two so regular 1,2,3
   mutating in last one: 2, 3, 1
#########################################################################################

# QUESTION 4

Ben was tasked to write a simple ruby method to determine if an input string is an IP address representing dot-separated numbers. 
e.g. "10.4.5.11". He is not familiar with regular expressions. Alyssa supplied Ben with a method called is_an_ip_number? 
that determines if a string is a valid ip address number and asked Ben to use it.

def dot_separated_ip_address?(input_string)
  dot_separated_words = input_string.split(".")
  while dot_separated_words.size > 0 do
    word = dot_separated_words.pop
    break unless is_an_ip_number?(word)
  end
  return true
end

Alyssa reviewed Ben's code and says "It's a good start, but you missed a few things. 
You're not returning a false condition, and you're not handling the case that there are more or fewer than 4 components 
to the IP address (e.g. "4.5.5" or "1.2.3.4.5" should be invalid)."

Q: help Ben fix his code.

NB: to clear up the problem: Ben still has to determine if it is a valid IP adress.
(valid ip adres has 4 positions divided by points). Alyssa's method only checks
whether it's a valid positive integer. Ben's method should return true or false.

A:

There are several ways to fix this. To determine if there are exactly 4 dot-separated "words" in the string, you can simply add a check for dot_separated_words.size after splitting the string.

The other error in Ben's code is that instead of returning false upon encountering a non-numeric component, he used break to break out of the while loop. Once he breaks, control falls through to the return true statement. He can fix this by performing return false instead of break.

def dot_separated_ip_address?(input_string)
  dot_separated_words = input_string.split(".")
  return false unless dot_separated_words.size == 4

  while dot_separated_words.size > 0 do
    word = dot_separated_words.pop
    return false unless is_an_ip_number?(word)
  end

  true
end







